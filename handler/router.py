from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from keyboard import *
from selenium.common.exceptions import TimeoutException
from scraper import *   # –∑–¥–µ—Å—å —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å get_uzum_... –∏ get_yandex_...
import hashlib

router = Router()

@router.message(CommandStart())
async def program_start(message: types.Message):
    user = message.from_user.first_name
    hello_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, *{user}!* \n\n"
        "**MindBuy** üõçÔ∏è ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ —Ç–æ–≤–∞—Ä—ã –≥–æ–≤–æ—Ä—è—Ç —Å–∞–º–∏ –∑–∞ —Å–µ–±—è!\n\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ:\n"
        "üìÇ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "üí∞ –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –∏ —Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä—ã\n"
        "‚≠ê –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã\n"
        "üîî –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö!\n\n"
    )
    await message.answer(hello_text, parse_mode="Markdown", reply_markup=marketplace_keyboard())


@router.callback_query(lambda c: c.data == "start_bot")
async def start_button(callback: types.CallbackQuery):
    if callback.message:
        await callback.message.delete()

    user = callback.from_user.first_name
    hello_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, *{user}!* \n\n"
        "**MindBuy** üõçÔ∏è ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ —Ç–æ–≤–∞—Ä—ã –≥–æ–≤–æ—Ä—è—Ç —Å–∞–º–∏ –∑–∞ —Å–µ–±—è!\n\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ:\n"
        "üìÇ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "üí∞ –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –∏ —Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä—ã\n"
        "‚≠ê –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã\n"
        "üîî –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö!\n\n"
    )
    await callback.message.answer(hello_text, parse_mode="Markdown", reply_markup=marketplace_keyboard())
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("support"))
async def help_command(callback: types.CallbackQuery):
    help_text = (
        "üõ† *MindBuy ‚Äî –ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1Ô∏è‚É£ *–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å*\n"
        "   - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *Uzum* –∏–ª–∏ *Yandex Market*, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å, –≥–¥–µ –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.\n\n"
        "2Ô∏è‚É£ *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏*\n"
        "   - –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n\n"
        "3Ô∏è‚É£ *–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—ã*\n"
        "   - –í –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã ‚≠êüíé\n\n"
        "4Ô∏è‚É£ *–ö–æ–º–∞–Ω–¥—ã*\n"
        "   /start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ\n\n"

        "üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ! üöÄ"
    )

    await callback.message.answer(help_text, parse_mode="Markdown", reply_markup=start_keyboard())
    await callback.answer()


PAGE_SIZE = 6
PRODUCTS_PAGE_SIZE = 6

categories_cache = {}
products_cache = {}

# ---------------------------------------------------------------------
# ----------------------------- UZUM ---------------------------------
# ---------------------------------------------------------------------

@router.message(Command("uzum"))
async def market_uzum(message: types.Message):
    chat_id = message.chat.id
    loading_msg = await message.answer("–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏... ‚è≥")

    try:
        categories = get_uzum_categories("https://uzum.uz/ru")
        categories_cache[chat_id] = categories
        await loading_msg.delete()
    except TimeoutException:
        await loading_msg.delete()
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    text = (
        "üõç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üçá **Uzum Market**!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤. ‚¨áÔ∏è\n\n"
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ!"
    )

    await message.answer(
        text,
        reply_markup=uzum_categories_keyboard(categories, page=0),
        parse_mode="Markdown"
    )


@router.callback_query(lambda c: c.data.startswith("uzum_page_"))
async def uzum_categories_pagination(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id
    page = int(callback.data.split("_")[-1])

    categories = categories_cache.get(chat_id)
    if not categories:
        await callback.message.edit_text(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢\n–ù–∞–∂–º–∏—Ç–µ /uzum —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å."
        )
        return

    await callback.message.edit_text(
        "üõç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚¨áÔ∏è",
        parse_mode="Markdown",
        reply_markup=uzum_categories_keyboard(categories, page)
    )


@router.callback_query(lambda c: c.data.startswith("uzum_"))
async def uzum_category_callback(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id

    category_hash = callback.data.split("_")[1]
    categories = categories_cache.get(chat_id, [])
    category = next(
        (c for c in categories if hashlib.md5(c["title"].encode()).hexdigest()[:8] == category_hash),
        None
    )

    if not category:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    loading_msg = await callback.message.answer(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['title']}...")
    products = get_uzum_products(category["url"])
    await loading_msg.delete()

    if not products:
        await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üò¢")
        return

    products_cache[chat_id] = products

    await callback.message.edit_text(
        f"üõí –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **{category['title']}**\\. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä ‚¨áÔ∏è",
        parse_mode="Markdown",
        reply_markup=uzum_products_keyboard(products, page=0)
    )


@router.callback_query(lambda c: c.data.startswith("products_page_"))
async def uzum_products_pagination(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id
    page = int(callback.data.split("_")[-1])

    products = products_cache.get(chat_id)
    if not products:
        await callback.message.answer("–¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢")
        return

    text = "üõí –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"

    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=uzum_products_keyboard(products, page)
    )


@router.callback_query(lambda c: c.data.startswith("back_to_categories"))
async def back_to_categories(callback: types.CallbackQuery):
    if callback.message:
        await callback.message.delete()
    await callback.answer()
    await market_uzum(callback.message)


@router.callback_query(lambda c: c.data.startswith("product_"))
async def product_detail_callback(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id
    products = products_cache.get(chat_id)
    if not products:
        await callback.message.answer("–¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢")
        return

    index = int(callback.data.split("_")[-1])
    if index >= len(products):
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢")
        return

    product = products[index]
    text = (
        f"‚ú®üõç **{product['title']}** ‚ú®\n\n"
        f"üí∞ –¶–µ–Ω–∞: **{product['price']} —Å—É–º**\n"
        f"üìÖ –†–∞—Å—Å—Ä–æ—á–∫–∞: *{product['price_per_month']}* –≤ –º–µ—Å—è—Ü\n"
        f"üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Uzum]({product['url']})"
    )

    await callback.message.answer(text, parse_mode="Markdown", reply_markup=product_details_keyboard(product))


@router.callback_query(lambda c: c.data.startswith("back_to_products"))
async def back_to_products(callback: types.CallbackQuery):
    if callback.message:
        await callback.message.delete()
    await callback.answer()


# ---------------------------------------------------------------------
# -------------------------- YANDEX MARKET ----------------------------
# ---------------------------------------------------------------------

@router.message(Command("yandex"))
async def market_yandex(message: types.Message):
    chat_id = message.chat.id
    loading_msg = await message.answer("üîé –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Yandex Market...")

    try:
        categories = get_yandex_categories("https://market.yandex.uz/")
        categories_cache[chat_id] = categories
        await loading_msg.delete()
    except TimeoutException:
        await loading_msg.delete()
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    text = (
        "üõç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üíõ **Yandex Market Uzbekistan**!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤. ‚¨áÔ∏è"
    )

    await message.answer(
        text,
        reply_markup=yandex_categories_keyboard(categories, page=0),
        parse_mode="Markdown"
    )


@router.callback_query(lambda c: c.data.startswith("yandex_page_"))
async def yandex_categories_pagination(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id
    page = int(callback.data.split("_")[-1])

    categories = categories_cache.get(chat_id)
    if not categories:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢\n–ù–∞–∂–º–∏—Ç–µ /yandex —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å.")
        return

    await callback.message.edit_text(
        "üõç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚¨áÔ∏è",
        parse_mode="Markdown",
        reply_markup=yandex_categories_keyboard(categories, page)
    )


@router.callback_query(lambda c: c.data.startswith("yandex_") and not c.data.startswith(("yandex_product_", "yandex_products_page_")) )
async def yandex_category_callback(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id

    category_hash = callback.data.split("_")[-1]
    categories = categories_cache.get(chat_id, [])
    category = next(
        (c for c in categories if hashlib.md5(c["title"].encode()).hexdigest()[:8] == category_hash),
        None
    )

    if not category:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    loading_msg = await callback.message.answer(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['title']}...")
    products = get_yandex_products(category["url"])
    await loading_msg.delete()

    if not products:
        await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üò¢")
        return

    products_cache[chat_id] = products

    await callback.message.edit_text(
        f"üõí –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **{category['title']}**. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä ‚¨áÔ∏è",
        parse_mode="Markdown",
        reply_markup=yandex_products_keyboard(products, page=0)
    )


@router.callback_query(lambda c: c.data.startswith("yandex_products_page_"))
async def yandex_products_pagination(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id
    page = int(callback.data.split("_")[-1])

    products = products_cache.get(chat_id)
    if not products:
        await callback.message.answer("–¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢")
        return

    text = "üõí –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"

    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=yandex_products_keyboard(products, page)
    )


@router.callback_query(lambda c: c.data.startswith("yandex_product_"))
async def yandex_product_detail(callback: types.CallbackQuery):
    await callback.answer()
    chat_id = callback.message.chat.id
    products = products_cache.get(chat_id)
    if not products:
        await callback.message.answer("–¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã üò¢")
        return

    index = int(callback.data.split("_")[-1])
    if index >= len(products):
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢")
        return

    product = products[index]
    text = (
        f"üõç **{product['title']}**\n\n"
        f"üí∞ –¶–µ–Ω–∞: **{product['price']}**\n"
        f"üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Yandex Market]({product['url']})"
    )

    await callback.message.answer(text, parse_mode="Markdown", reply_markup=yandex_product_details_keyboard(product))


# ---------------------------------------------------------------------
# ----------------------------- –û–±—â–∏–µ ---------------------------------
# ---------------------------------------------------------------------

@router.callback_query(lambda c: c.data.startswith("market_"))
async def callback_market(callback: types.CallbackQuery):
    await callback.answer()
    if callback.message:
        await callback.message.delete()

    if callback.data == "market_uzum":
        await market_uzum(callback.message)
    elif callback.data == "market_yandex":
        await market_yandex(callback.message)


@router.callback_query(lambda c: c.data == "back_home")
async def callback_back_home(callback: types.CallbackQuery):
    await callback.answer()
    await program_start(callback.message)